# Node.js with React
# Build a Node.js project that uses React.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

parameters:
  - name: Environment
    type: string

jobs:
- job: Build
  strategy:
    matrix:
      Android:
        ImageName: 'ubuntu-latest'
        Platform: android
        Contents: |
          android/**/*.apk
          android/**/*.aab
      iOS:
        ImageName: 'macOS-latest'
        Platform: ios
        Contents: ios/**/*.ipa

  pool:
    vmImage: $(ImageName)

  steps:
    - script: |
        man ls > android/app/src/release.${{ parameters.Environment }}.apk
      displayName: Android apk
      condition: and(succeeded(), eq(variables['Platform'], 'android'))

    - script: |
        man ls > android/app/src/main/release.${{ parameters.Environment }}.aab
      displayName: Android aab
      condition: and(succeeded(), eq(variables['Platform'], 'android'))

    - script: |
        man rm > ios/ipa/release.${{ parameters.Environment }}.ipa
      displayName: iOS
      condition: and(succeeded(), eq(variables['Platform'], 'ios'))

    # - task: NodeTool@0
    #   inputs:
    #     versionSource: 'fromFile'
    #     versionFilePath: .nvmrc
    #   displayName: 'Install Node.js'

    # - task: CmdLine@2
    #   displayName: yarn/npm install
    #   inputs:
    #     script: yarn

    # - task: CmdLine@2
    #   displayName: Install fastlane using Gemfile
    #   inputs:
    #     script: |
    #       sudo gem install bundler
    #       sudo bundle install

    # - task: CmdLine@2
    #   displayName: Run fastlane
    #   condition: succeeded()
    #   inputs:
    #     script: |
    #       bundle exec fastlane $(Platform) build \
    #         env:${{ parameters.Environment }} version_code:$(Build.BuildId)

    # - task: CopyFiles@2
    #   displayName: Copy compiled binary
    #   inputs:
    #     contents: ${{ parameters.Contents }}
    #     TargetFolder: '$(Build.ArtifactStagingDirectory)'
    #     OverWrite: true

    # - task: CopyFiles@2
    #   displayName: Copy compiled binary
    #   condition: and(succeeded(), eq(variables['Platform'], 'android'))
    #   inputs:
    #     contents: android/**/*.apk
    #     TargetFolder: '$(Build.ArtifactStagingDirectory)'
    #     # CleanTargetFolder: true
    #     OverWrite: true

    # - task: CopyFiles@2
    #   displayName: Copy compiled binary
    #   condition: and(succeeded(), eq(variables['Platform'], 'ios'))
    #   inputs:
    #     contents: ios/**/*.ipa
    #     TargetFolder: '$(Build.ArtifactStagingDirectory)'
    #     # CleanTargetFolder: true
    #     OverWrite: true

    - task: CopyFiles@2
      displayName: Copy compiled binary
      inputs:
        contents: $(Contents)
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        CleanTargetFolder: true
        OverWrite: true

    - publish: $(Build.ArtifactStagingDirectory)
      artifact: $(Platform).${{ parameters.Environment }}.$(Build.BuildId)
      displayName: Publish artifact
